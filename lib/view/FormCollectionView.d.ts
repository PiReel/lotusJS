import { AbstractCollectionView } from "./AbstractCollectionView";
import { AbstractItemView } from "./AbstractItemView";
import { LotusHTMLElement } from "../context/LotusHTMLElement";
export declare class FormCollectionView extends AbstractCollectionView {
    static INPUT: number;
    static VALIDATION_ERROR: number;
    static SUBMIT: number;
    static ERROR: number;
    private _state;
    private _validationWarning;
    private _validationWarningDisplay;
    private _inputState;
    private _inputStateDisplay;
    private _submitState;
    private _submitStateDisplay;
    private _errorState;
    private _errorStateDisplay;
    private _input;
    private _list;
    private _radioGroup;
    private _file;
    private _errorMessage;
    private _error;
    private _submit;
    private _clear;
    private _back;
    inputItemView: string;
    listItemView: string;
    radioGroupItemView: string;
    fileItemView: string;
    invalidClass: string;
    validClass: string;
    constructor();
    submit: HTMLElement;
    clear: HTMLElement;
    back: HTMLElement;
    error: HTMLElement;
    errorMessage: string;
    state: number;
    validationWarning: HTMLElement;
    inputState: HTMLElement;
    submitState: HTMLElement;
    errorState: HTMLElement;
    input: HTMLElement;
    list: HTMLElement;
    radioGroup: HTMLElement;
    file: HTMLElement;
    protected createChildView(model: Object): AbstractItemView;
    protected cloneItemTemplate(model: any): LotusHTMLElement;
    protected onSubmit(event: Event): void;
    protected onClear(event: Event): void;
    protected onBack(event: Event): void;
    protected addViewEventListeners(view: AbstractItemView): void;
    protected removeViewEventListeners(view: AbstractItemView): void;
    protected resolveState(state: number, oldState: any): void;
    onReady(): void;
    defineSkinParts(): void;
    onSkinPartAdded(part: string, element: HTMLElement): void;
    destroy(): void;
}
